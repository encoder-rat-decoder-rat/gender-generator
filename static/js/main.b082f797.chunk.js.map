{"version":3,"sources":["GooeyShader.frag","GooeyFilter.js","utils.js","downloadFrame.js","index.js"],"names":["GooeyFilter","threshold","Filter","defaulVertexSrc","fragment","_threshold","uniforms","uThreshold","value","this","luminanace","r","g","b","a","map","v","Math","pow","contrast","rgb1","rgb2","lum1","lum2","max","min","svg","canvas","document","createElement","width","Number","getAttribute","height","ctx","getContext","image","Image","svgAsXML","XMLSerializer","serializeToString","Promise","resolve","onload","src","encodeURIComponent","drawImage","toBlob","blob","URL","createObjectURL","url","body","appendChild","setAttribute","click","remove","window","PIXI","settings","FILTER_RESOLUTION","fgColorArray","seed","URLSearchParams","location","search","get","seededRandom","seedrandom","bgColorArray","isContrastRatioAcceptable","bgColor","utils","rgb2hex","fgColor","app","Application","innerWidth","innerHeight","antialias","resizeTo","backgroundColor","sharedTicker","sharedLoader","start","Ticker","shared","view","faceContainer","Container","stage","addChild","position","set","renderer","blurFilter","filters","BlurFilter","blur","quality","gooeyFilter","dotFilter","DotFilter","colorReplace","MultiColorReplaceFilter","currentParams","createPoint","point","size","xRel","yRel","circle","Graphics","beginFill","drawCircle","endFill","key","setInterval","newParams","includes","downloadAsPNG","getElementById","MESH_ANNOTATIONS","feature","name","forEach","pointIndex","UV_COORDS","scale","rotation","PI","containerBounds","getBounds"],"mappings":"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","file":"static/js/main.b082f797.chunk.js","sourcesContent":["export default \"// Based on Waterdrop shader from https://codepen.io/stefanweck/pen/Vbgeax\\nprecision highp float;\\n#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform float uThreshold;\\n\\nvoid main(void) {\\n    vec4 color = texture2D(uSampler, vTextureCoord);\\n    color.a = step(uThreshold, color.a);\\n    gl_FragColor = color;\\n}\";","import { Filter } from \"pixi.js\";\n\nimport fragment from \"./GooeyShader.frag\";\n\nclass GooeyFilter extends Filter {\n  constructor(threshold = 0.2) {\n    super(Filter.defaulVertexSrc, fragment);\n    this._threshold = threshold;\n    this.uniforms.uThreshold = this._threshold;\n  }\n\n  /**\n   * Sets the threshold for the amount of goooooo\n   *\n   * @member {Number}\n   * @default 0\n   */\n  set threshold(value) {\n    this._threshold = value;\n    this.uniforms.uThreshold = value;\n  }\n  get threshold() {\n    return this._threshold;\n  }\n}\n\nexport default GooeyFilter;\n","/**\n * Calculate the luminance (the intensity of light or brightness) of a color\n * https://stackoverflow.com/questions/9733288/how-to-programmatically-calculate-the-contrast-ratio-between-two-colors\n *\n * @param {Number} r The Red value from 0.0 to 1.0\n * @param {Number} g The Green value from 0.0 to 1.0\n * @param {Number} b The Blue value from 0.0 to 1.0\n */\nexport function luminanace(r, g, b) {\n  const a = [r * 255, g * 255, b * 255].map((v) => {\n    v /= 255;\n    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\n  });\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n}\n\n/**\n * Calculate the contrast ratio of two color arrays\n * https://stackoverflow.com/questions/9733288/how-to-programmatically-calculate-the-contrast-ratio-between-two-colors\n * @param {Number[]} rgb1 A color array in a [r,g,b] format from 0.0 to 1.0\n * @param {Number[]} rgb2 A color array in a [r,g,b] format from 0.0 to 1.0\n */\nexport function contrast(rgb1, rgb2) {\n  const lum1 = luminanace(rgb1[0], rgb1[1], rgb1[2]);\n  const lum2 = luminanace(rgb2[0], rgb2[1], rgb2[2]);\n  const brightest = Math.max(lum1, lum2);\n  const darkest = Math.min(lum1, lum2);\n  return (brightest + 0.05) / (darkest + 0.05);\n}\n","/**\n * Downloads the passed SVG node as a png.\n *\n * @param      {Node}   svg     The svg\n * @return     {Promise}  { description_of_the_return_value }\n */\nexport async function downloadAsPNG(svg) {\n  // First generate a canvas the size of the svg\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = Number(svg.getAttribute(\"width\"));\n  canvas.height = Number(svg.getAttribute(\"height\"));\n  const ctx = canvas.getContext(\"2d\");\n\n  var image = new Image();\n  const svgAsXML = new XMLSerializer().serializeToString(svg);\n\n  await new Promise((resolve) => {\n    image.onload = resolve;\n    image.src = \"data:image/svg+xml,\" + encodeURIComponent(svgAsXML);\n  });\n\n  ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n  const url = await new Promise((resolve) => {\n    // toBlob(callback, mimeType, qualityArgument);\n    canvas.toBlob(function (blob) {\n      resolve(URL.createObjectURL(blob));\n    }, \"image/png\");\n  });\n\n  var a = document.createElement(\"a\");\n  document.body.appendChild(a); // This line makes it work in Firefox.\n  a.setAttribute(\"download\", \"image.jpg\");\n  a.setAttribute(\"href\", url);\n  a.setAttribute(\"target\", \"_blank\");\n  a.click();\n  // We don't need it anymore, remove it\n  a.remove();\n}\n","import \"./index.css\";\n\nimport {\n  Application,\n  Container,\n  Graphics,\n  filters,\n  Ticker,\n  settings,\n  utils,\n} from \"pixi.js\";\nimport * as PIXI from \"pixi.js\";\nimport { DotFilter } from \"@pixi/filter-dot\";\nimport { MultiColorReplaceFilter } from \"@pixi/filter-multi-color-replace\";\n\nimport { UV_COORDS } from \"@tensorflow-models/face-landmarks-detection/dist/mediapipe-facemesh/uv_coords.js\";\nimport { MESH_ANNOTATIONS } from \"@tensorflow-models/face-landmarks-detection/dist/mediapipe-facemesh/keypoints.js\";\n\nimport seedrandom from \"seedrandom\";\n\nimport GooeyFilter from \"./GooeyFilter.js\";\nimport { contrast } from \"./utils.js\";\n\nimport { downloadAsPNG } from \"./downloadFrame.js\";\n\nwindow.PIXI = PIXI;\nsettings.FILTER_RESOLUTION = 2;\n\n///////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////\n/////////////////////////////// Reference ////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////\n// http://bl.ocks.org/nbremer/0e98c72b043590769facc5e829ebf43f\n// http://bl.ocks.org/syntagmatic/6a921aed54be2a2bea5e56cf2157768b\n// https://www.visualcinnamon.com/2016/06/fun-data-visualizations-svg-gooey-effect\n\n///////////////////////////////////////////////////////////////////////////\n/////////////////////////////// Set-up ////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////\n\n// Set our random seed based on the \"seed\" query parameter supplied\nconst queryParams = new URLSearchParams(window.location.search);\nconst seed = queryParams.get(\"seed\");\nconst seededRandom = seedrandom(seed);\n\nconst bgColorArray = [seededRandom(), seededRandom(), seededRandom()];\n// Ensure the FG color has at least a contrast ratio of 4.5: 1 for legibility\n// https://www.w3.org/TR/WCAG20-TECHS/G18.html\nlet isContrastRatioAcceptable = false;\nlet fgColorArray;\nwhile (!isContrastRatioAcceptable) {\n  fgColorArray = [seededRandom(), seededRandom(), seededRandom()];\n\n  isContrastRatioAcceptable = contrast(bgColorArray, fgColorArray) >= 4.5;\n}\n\nconst bgColor = utils.rgb2hex(bgColorArray);\nconst fgColor = utils.rgb2hex(fgColorArray);\n\n// Setup the pixi application\nconst app = new Application({\n  width: window.innerWidth,\n  height: window.innerHeight,\n  antialias: true,\n  resizeTo: window,\n  backgroundColor: bgColor,\n  sharedTicker: true,\n  sharedLoader: true,\n});\nwindow.app = app;\napp.start();\nTicker.shared.start();\n// Add it to the body\ndocument.body.appendChild(app.view);\n\n// Set a container for where all of the objects will be (so we can center and scale it on resize)\nconst faceContainer = new Container();\napp.stage.addChild(faceContainer);\nfaceContainer.position.set(app.renderer.width / 2, app.renderer.height / 2);\n\n// Add visual filters\nconst blurFilter = new filters.BlurFilter();\nblurFilter.blur = 20;\nblurFilter.quality = 10;\n\nconst gooeyFilter = new GooeyFilter();\n\nconst dotFilter = new DotFilter(1.05, 0);\nconst colorReplace = new MultiColorReplaceFilter(\n  [\n    [0xffffff, bgColor],\n    [0x000000, fgColor],\n  ],\n  0.1\n);\n\nfaceContainer.filters = [blurFilter, gooeyFilter, dotFilter, colorReplace];\n\n// Set an interval loop to check if the ?frame query param is added to the url\nlet currentParams = null;\nconst checkFrame = () => {\n  const newParams = window.location.search;\n  if (currentParams !== newParams && newParams.includes(\"?frame\")) {\n    downloadAsPNG(document.getElementById(\"chartWrapper\"));\n  }\n  currentParams = newParams;\n};\nwindow.setInterval(checkFrame, 2000);\n\n/**\n * Add a point on the face mesh\n *\n * @param      {Number}  [size=seededRandom()*14+8]  The size\n */\nfunction createPoint(point, size = 1, color = 0xffffff) {\n  // The UV coords are normalized in terms of 0 -> 1 of the container\n  const [xRel, yRel] = point;\n  const circle = new Graphics()\n    .beginFill(0xffffff * seededRandom())\n    .drawCircle(0, 0, size)\n    .endFill();\n  // TODO: reposition on window resize\n  circle.position.set(\n    xRel * app.renderer.width - app.renderer.width / 2,\n    yRel * app.renderer.height - app.renderer.height / 2\n  );\n  return circle;\n}\n\n// Add all of the important points\nfor (const key in MESH_ANNOTATIONS) {\n  if (!key.includes(\"Iris\") && !key.includes(\"silhouette\")) {\n    const feature = new Container();\n    feature.name = key;\n\n    MESH_ANNOTATIONS[key].forEach((pointIndex) => {\n      feature.addChild(createPoint(UV_COORDS[pointIndex], seededRandom() * 30));\n    });\n\n    feature.position.set(25 - seededRandom() * 50, 25 - seededRandom() * 50);\n\n    feature.scale.set(\n      1 + (0.2 - seededRandom() * 0.4),\n      1 + (0.2 - seededRandom() * 0.4)\n    );\n\n    feature.rotation = Math.PI / 8 - (seededRandom() * Math.PI) / 4;\n\n    faceContainer.addChild(feature);\n  }\n}\n\n// Scale up the face so at least one edge is touching the sides\nconst containerBounds = faceContainer.getBounds();\nfaceContainer.scale.set(\n  Math.min(\n    1 + (app.renderer.width - containerBounds.width) / containerBounds.width,\n    1 + (app.renderer.height - containerBounds.height) / containerBounds.height\n  )\n);\n"],"sourceRoot":""}